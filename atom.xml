<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tyrant&#39;s Blog</title>
  <subtitle>It&#39;s just acgtyrant&#39;s blog... or delusion.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.acgtyrant.com/"/>
  <updated>2018-10-02T08:21:42.074Z</updated>
  <id>http://blog.acgtyrant.com/</id>
  
  <author>
    <name>Isaac Ge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 剪贴板・终阶</title>
    <link href="http://blog.acgtyrant.com/Linux-%E5%89%AA%E8%B4%B4%E6%9D%BF%E3%83%BB%E7%BB%88%E9%98%B6.html"/>
    <id>http://blog.acgtyrant.com/Linux-剪贴板・终阶.html</id>
    <published>2018-10-02T07:56:23.000Z</published>
    <updated>2018-10-02T08:21:42.074Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i0.hdslb.com/bfs/archive/571003a757179b0b7b0d6112d1717d0959d9db5a.jpg" alt="旷野之息 力之试炼 终阶＋"></p>
<p>我用 Linux 好多年，依然没真正理清 Linux 下剪贴板的用法，因为很多程序的复制粘贴行为都不一样，何况Ｘ还有两种剪贴板，再加上我经常跨机编辑，即 termite+ssh+tmux+neovim，这么多程序叠加在一起，就一直不知道到底怎么复制粘贴好。这不，今天我要在远程主机 yy 上通过 NeoVim 选中里面的内容，复制到另一个远程主机 103 的 NeoVim 上，乱按快捷键一通也没解决。于是终于彻底下定决心搞清 Linux 以及众多程序的剪贴板原理，在此整理并归档研究结论。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ul>
<li><p><a href="https://wiki.archlinux.org/index.php/Clipboard" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Clipboard</a></p>
</li>
<li><p><a href="[https://blog.lilydjwg.me/2013/11/24/clipboards-in-x-window.41800.html](https://blog.lilydjwg.me/2013/11/24/clipboards-in-x-window.41800.html">X Window 中的剪贴板</a>)</p>
</li>
</ul>
<p>按这两篇的说法，所谓两种剪贴板 Clipboard 和 Primary selection 都是Ｘ的功能。区别是前者用 Windows 那样的复制粘贴键 <code>ctrl+c/ctrl+v</code>，后者只需选中内容，就可以在别的地方用鼠标中键粘贴。还有 <code>shift+insert</code> 能起到 <code>ctrl+v</code> 的作用，但这键太冷门了就不记了。</p>
<p>此外其实这两个剪贴板都是异步的——只有在粘贴时，才会真正触发复制！我实践发现，哪怕在 Gedit 主动用 <code>ctrl+c</code> 复制后，关掉 Gedit，在 Google Chrome 的地址栏就粘贴不出来任何东西了。 于是 ArchWiki 建议改用剪贴板管理器来解决。此外为了措辞上的方便，下文假设复制粘贴是同步的，比如「复制东西进剪贴板」。</p>
<p>选中也不一定可以复制，除了依云提到的，我还发现 Google Chrome 按 <code>alt+d</code> 选中地址栏的 URL，不能复制；但鼠标双击地址栏全选，能复制。</p>
<h1 id="简化原则"><a href="#简化原则" class="headerlink" title="简化原则"></a>简化原则</h1><p>为了解决如此复杂的剪贴板问题，我需要设定一些简化原则，减轻记忆负担。</p>
<ul>
<li><p>只用 clipboard！从此以后就当 Linux 只存在一种剪贴板。自然不用记住选中却无法复制的例外情况了。primary，不存在。</p>
</li>
<li><p>尽可能地让所有程序的复制粘贴键接近 vim-binding。</p>
</li>
</ul>
<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p>开始整理并归档御用程序如何使用剪贴板的解决方案。</p>
<h2 id="御用剪贴板交互命令・-xclip"><a href="#御用剪贴板交互命令・-xclip" class="headerlink" title="御用剪贴板交互命令・ xclip"></a>御用剪贴板交互命令・ xclip</h2><p>除了用程序本身的复制粘贴键、鼠标选中复制与中键粘贴行为，其实也有现成的命令，能在 Shell 里与Ｘ剪贴板互动。最常见的有两个命令： <a href="[https://askubuntu.com/questions/705620/xclip-vs-xsel](https://askubuntu.com/questions/705620/xclip-vs-xsel">‘xclip’ vs. ‘xsel’</a>)</p>
<p>由于 xsel 已经两年没更新了，而且 GitHub 官方帮助又钦定 xclip，再加上 xclip 比 xsel 顺耳许多了。我决定 xclip 作为御用剪贴板交互命令。</p>
<p>xclip 默认复制进 primary，坑。</p>
<h2 id="御用虚拟终端・-Terminate"><a href="#御用虚拟终端・-Terminate" class="headerlink" title="御用虚拟终端・ Terminate"></a>御用虚拟终端・ Terminate</h2><p><a href="https://wiki.archlinux.org/index.php/Termite" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Termite</a></p>
<p>Termite 像 Vim，有两种模式：Insert 和 Selection。</p>
<p>Insert 模式下，可以直接用鼠标选中内容，但它的行为和 Vim 不一样：仍然处于 Insert 模式！用户可以一边选中内容，一边输入内容。由于虚拟终端和 Shell 紧密相关，不能直接用 <code>ctrl+c/ctrl+v</code>，只能用 <code>ctrl+shift+c/ctrl+shift+v</code> 代替复制粘贴。</p>
<p>按 <code>ctrl+shift+space</code> 可以进入 selection 模式，行为和 Vim 一样，不赘述。</p>
<p>复制会复制到Ｘ剪贴板，我测试了下发现包括 clipboard.</p>
<p>由于我习惯用 Tmux，Termite 的复制粘贴功能其实不重要，无需记忆。不过，我发现 <strong>Termite 的 <code>ctrl+shift+v</code> 在 Tmux 一样有效</strong> ！</p>
<h2 id="御用网络传输协议・-SSH"><a href="#御用网络传输协议・-SSH" class="headerlink" title="御用网络传输协议・ SSH"></a>御用网络传输协议・ SSH</h2><p>既然剪贴板由Ｘ负责，那么我们需要 SSH 能够转发远程主机上的Ｘ程序到本地上，从而让远程主机能与本地的剪贴板互动。信任远程主机的话，<code>alias ssh=&#39;ssh -Y&#39;</code> 即可。</p>
<p>实践证明，我 SSH 到远程主机并开启 Tmux 后，<strong>我可以把 clipboard 的东西通过 Termite 的 <code>ctrl+shifht+v</code> 粘贴进该 Tmux Session 的某 pane 里。</strong></p>
<h2 id="御用终端多路复用器・-Tmux"><a href="#御用终端多路复用器・-Tmux" class="headerlink" title="御用终端多路复用器・ Tmux"></a>御用终端多路复用器・ Tmux</h2><p>由于 Termite 的复制粘贴直接作用于整个虚拟终端的界面上，不分 Tmux 里的 pane，于是需要掌握 Tmux 下能在 pane 复制粘贴行为。</p>
<p>Tmux 也有两种模式。一是常规模式，即用户在 pane 里的行为和单个虚拟终端一样；另一是 copy-mode，为能够在 pane 下滚动历史或复制而服务，其又有两种 binding，一是 Emacs 另一是 Vim，默认用 Emacs binding。</p>
<p>我习惯 vim-like 步骤与行为，自然要重新设置为 Vim Binding： <code>set-window-option -g mode-keys vi</code>。</p>
<p>此外 Tmux 2.4 有重新定义 Key Binding 语法，本文不考虑 Tmux 2.4 之前的旧 Key Binding 语法。</p>
<p>Tmux 原本进入 copy-mode 的默认 key binding 为 <code>prefix+[</code>，太蠢，为保持与 Vim Binding 一致，可以直接修改： <code>bind-key Escape copy-mode # enter copy mode (prefix Escape)</code>，模仿在 Vim 从 Insert 模式退出，进入 Normal 模式的行为。</p>
<p>再继续改造 key bindings：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bind-key -T copy-mode-vi &apos;v&apos; send-keys -X begin-selection</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi &apos;V&apos; send-keys -X select-line</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi &apos;r&apos; send-keys -X rectangle-toggle</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi &apos;y&apos; send-keys -X copy-pipe-and-cancel &quot;xclip -in -selection clipboard&quot;</div></pre></td></tr></table></figure>
<p>需要注意的是 Tmux copy mode 不支持 Vim Visual 模式 <code>ctrl+v</code> 那样的 block selection，但是可以通过 <code>r</code> 改变 <code>v</code> 的 selection 行为，即从跨行 selection 和 block selection 之间转换。<code>y</code> 则是粘贴进 clipboard 了。</p>
<p>更进一步地像 Vim 那样能滚动浏览 pane 的历史：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># scroll like vim</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi f send-keys page-down</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi b send-keys page-up</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi d send-keys halfpage-down</div><div class="line"></div><div class="line">bind-key -T copy-mode-vi u send-keys halfpage-up</div></pre></td></tr></table></figure>
<p>其实本来还可以加 <code>bind-key p run &quot;xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer&quot;</code>，不过还是 <code>ctrl+shift+v</code> 粘贴更方便，就不加了。</p>
<h2 id="御用文本编辑器・-NeoVim"><a href="#御用文本编辑器・-NeoVim" class="headerlink" title="御用文本编辑器・ NeoVim"></a>御用文本编辑器・ NeoVim</h2><p>Vim 要有开启 clipboard 编译选项，才支持剪贴板（大概）。据说 Arch Linux 的 vim 就没开启！只能改装 gvim 包了。</p>
<p>好在 NeoVim 支持，但需要额外的依赖，<code>help clipboard</code> 指出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">The presence of a working clipboard tool implicitly enables the &apos;+&apos; and &apos;*&apos;</div><div class="line"></div><div class="line">registers. Nvim looks for these clipboard tools, in order of priority:</div><div class="line"></div><div class="line">- |g:clipboard|</div><div class="line"></div><div class="line">- pbcopy/pbpaste (macOS)</div><div class="line"></div><div class="line">- xsel (if $DISPLAY is set)</div><div class="line"></div><div class="line">- xclip (if $DISPLAY is set)</div><div class="line"></div><div class="line">- lemonade (for SSH) [https://github.com/pocke/lemonade](https://github.com/pocke/lemonade)</div><div class="line"></div><div class="line">- doitclient (for SSH) [http://www.chiark.greenend.org.uk/~sgtatham/doit/](http://www.chiark.greenend.org.uk/~sgtatham/doit/)</div><div class="line"></div><div class="line">- win32yank (Windows)</div><div class="line"></div><div class="line">- tmux (if $TMUX is set)</div></pre></td></tr></table></figure>
<p>显然装 xclip 就行了。</p>
<p>Vim 默认 VISUAL 选中内容不会复制进 primary，这样正好，毕竟 Vim 重在编辑。可以通过 <code>shift+&quot;+y</code> 复制进 clipboard。</p>
<p>至于到底怎么复制粘贴，看 <a href="[https://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard](https://stackoverflow.com/questions/11489428/how-to-make-vim-paste-from-and-copy-to-systems-clipboard">How to make vim paste from (and copy to) system’s clipboard?</a>) 就够了。</p>
<p>最后，如何在 SSH 到远程主机再 Tmux 后再开 NeoVim，如何复制粘贴到本地？简单，<code>ssh -Y</code>，本地和远程主机都装 xclip，跟平常一样复制粘贴。</p>
<h2 id="御用剪贴板管理器・Flicx-Clipboard"><a href="#御用剪贴板管理器・Flicx-Clipboard" class="headerlink" title="御用剪贴板管理器・Flicx Clipboard"></a>御用剪贴板管理器・Flicx Clipboard</h2><p>参见 <a href="[https://www.csslayer.info/wordpress/fcitx-dev/fcitx-clipboard/">Fcitx Clipboard</a>](<a href="https://www.csslayer.info/wordpress/fcitx-dev/fcitx-clipboard/))，在其插件的高级设置里可以把" target="_blank" rel="external">https://www.csslayer.info/wordpress/fcitx-dev/fcitx-clipboard/))，在其插件的高级设置里可以把</a> primary text 关掉。作为剪贴板管理器已经足够好用了。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i0.hdslb.com/bfs/archive/571003a757179b0b7b0d6112d1717d0959d9db5a.jpg&quot; alt=&quot;旷野之息 力之试炼 终阶＋&quot;&gt;&lt;/p&gt;
&lt;p&gt;我用 Linux 好多年，依然没真正理清 
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.acgtyrant.com/tags/Linux/"/>
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>我又双迁移到 NeoVim 了</title>
    <link href="http://blog.acgtyrant.com/%E6%88%91%E5%8F%88%E5%8F%8C%E8%BF%81%E7%A7%BB%E5%88%B0-NeoVim-%E4%BA%86.html"/>
    <id>http://blog.acgtyrant.com/我又双迁移到-NeoVim-了.html</id>
    <published>2018-07-02T23:34:27.000Z</published>
    <updated>2018-07-02T23:56:12.577Z</updated>
    
    <content type="html"><![CDATA[<p>两年前，我曾在技术博客发表过《用 Neovim 取代 Vim》，但当时我很快又放弃 NeoVim 了，继续用 Vim。因为我始终没找到令我满意的 NeoVim 的 GUI；再次，Ubuntu 16.04 没有打包 NeoVim，每次在新开发机上部署开发环境编译安装 NeoVim 也很麻烦；最后，Vim 7.5 也支持异步并发 API，以致我不太青睐 NeoVim 了。</p>
<p>其实我之所以一定要用 GUI，因为我一直没真正配置好虚拟终端，终端多路复用器和文本编辑器的色彩，导致 Vim 在虚拟终端和多路复用器会话里显示的色彩非常怪异，所以我实际上过去一直只用 GVim，不爱用 Vim。一月半前，在机缘巧合的他人帮助下，我正确配置好了 Vim 的 256 color，以致以后不论在本地还是远程主机上，都可以直接在虚拟终端下愉快地用 Vim 开发了，这也间接地为后来的迁移大作战扫除了障碍。</p>
<p>一月前，我偶然读到<a href="http://www.skywind.me/blog/archives/2084" target="_blank" rel="external">Vim 8 下 C/C++ 开发环境搭建</a>，里面介绍了众多令人叹为观止的现代 Vim 插件，有些需要在 NeoVim 上才能用。于是我心血来潮，又双迁移到 NeoVIm 了，并且迁移大作战成功！</p>
<p>其间我发现 NeoVim 本身已经编译好了 Linux 上通用的二进制包，直接下载 <a href="https://github.com/neovim/neovim/releases/download/v0.3.0/nvim.appimage" target="_blank" rel="external">nvim.appimage</a>（版本为目前最新的 3.1）到 <code>$HOME/.local/bin</code> 并命名为你喜欢的即可，当然别忘了修改其为可执行文件。这样以后只要如此少量的命令，就可以快速在开发机上部署新开发环境了，毕竟不比安装发行版的 Vim 二进制包麻烦多少，何况 Ubuntu 16.04 发行版提供的二进制包 Vim 版本还处于 7.4 时代，老掉牙。</p>
<p>我再重新解说下迁移到 NeoVim 的好处：</p>
<h3 id="全面并发"><a href="#全面并发" class="headerlink" title="全面并发"></a>全面并发</h3><p>虽说 Vim 8 也支持了，但这当初应该是 NeoVim 倒逼 Vim 出来的，不可忽略。此外在全面并发的支持下，vim-plug 安装我高达三十多个的插件，不到半分钟！这可怕的速度在以前 Vim 时代是不可想象的。<a href="http://www.skywind.me/blog/archives/2084" target="_blank" rel="external">Vim 8 下 C/C++ 开发环境搭建</a> 里面提到的很多强大插件，也实实在在得到了全面的速度提升好处。</p>
<h3 id="默认配置更加友好"><a href="#默认配置更加友好" class="headerlink" title="默认配置更加友好"></a>默认配置更加友好</h3><p>说起来 Vim 的一些过时默认配置会让你大吃一惊，比如它默认的 encoding 至今依然是 <code>latin1</code> ！Neovim 当然早改用 <code>utf-8</code> 了。还有<a href="https://neovim.io/doc/user/vim_diff.html#nvim-defaults" target="_blank" rel="external">一些不合时宜的默认 setting 也纷纷得到了修改</a>，免去用户手动配置之苦，我就在迁移原 <code>.vimrc</code> 时删去了 25 行多，净化完毕，更加极简！</p>
<h3 id="充分遵循-XDG-规范"><a href="#充分遵循-XDG-规范" class="headerlink" title="充分遵循 XDG 规范"></a>充分遵循 XDG 规范</h3><p>Vim 默认的  <code>.vimrc</code>  和  <code>.vim</code>  均一般在  <code>$HOME</code>  下，Neovim 则全挪为  <code>$XDG_CONFIG_HOME/nvim/init.vim</code>  和  <code>$XDG_CONFIG_HOME/nvim</code>.</p>
<p>Vim 编辑文件时，可以有多达四个的数据文件：<code>backup</code>,  <code>swapfile</code>,  <code>undofile</code>  和  <code>viminfo</code>. Unix 下的 Vim 分别默认存在  <code>&quot;.,~/tmp,~/&quot;</code>,  <code>&quot;.,~/tmp,/var/tmp,/tmp&quot;</code>,  <code>&quot;.&quot;</code>, 其中  <code>viminfo</code>  的具体储存位置我一时还查不出来，就懒得深究了。后来依云指出：undofile 默认没有值，不保存撤销记录，viminfo 位于用户目录。</p>
<p>NeoVim 则全改储存在  <code>$XDG_DATA_HOME/nvim/</code>  下各自的目录里，此外 viminfo 更是被抛弃，被叫 ShaDa 且更为先进的二进制文件所代替，后者位于  <code>$XDG_DATA_HOME/nvim/shada/main.shada</code>.</p>
<p>再加上用户自行安装的 NeoVim 二进制包也在 <code>$HOME/.local/bin</code> 里，一家人更加整整齐齐。</p>
<h3 id="完美无瑕的真彩"><a href="#完美无瑕的真彩" class="headerlink" title="完美无瑕的真彩"></a>完美无瑕的真彩</h3><p>具体详见<a href="http://blog.acgtyrant.com/%E5%9C%A8-Linux-%E4%B8%8B%E5%85%A8%E9%9D%A2%E4%BD%BF%E7%94%A8%E7%9C%9F%E5%BD%A9.html">在 Linux 下全面使用真彩</a>。</p>
<p><img src="images/neovim.png" alt="看！我的括号会发光！"></p>
<h2 id="那么问题来了：怎么迁移？"><a href="#那么问题来了：怎么迁移？" class="headerlink" title="那么问题来了：怎么迁移？"></a>那么问题来了：怎么迁移？</h2><p>Arch Linux 用户都装  <code>neovim</code>,  <code>python-neovim</code>  和  <code>python2-neovim</code>. Ubuntu 用户下载官方编译好的二进制包并更改为 <code>$HOME/.local/bin</code> 的可执行文件。</p>
<p>除非你用干净的  <a href="http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html" target="_blank" rel="external">dotfiles</a>  管理 Vim, 否则自行清理插件；<a href="http://www.adamwadeharris.com/how-to-switch-from-vim-to-neovim/" target="_blank" rel="external">再迁移到 XDG 目录下</a>；改用支持 Neovim 的  <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="external">vim-plug</a>  并重新安装所有插件，可以先按 <a href="vim-plug/automatic-installation">https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
</a> 加入相关代码，以致只要一打开 NeoVim 它就会自动安装包管理器本身和所有包，超方便的；按  <a href="https://neovim.io/doc/user/vim_diff.html" target="_blank" rel="external">vim-difference</a>  来打扫  <code>init.vim</code>  中已无用的设置。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两年前，我曾在技术博客发表过《用 Neovim 取代 Vim》，但当时我很快又放弃 NeoVim 了，继续用 Vim。因为我始终没找到令我满意的 NeoVim 的 GUI；再次，Ubuntu 16.04 没有打包 NeoVim，每次在新开发机上部署开发环境编译安装 NeoV
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 下全面使用真彩</title>
    <link href="http://blog.acgtyrant.com/%E5%9C%A8-Linux-%E4%B8%8B%E5%85%A8%E9%9D%A2%E4%BD%BF%E7%94%A8%E7%9C%9F%E5%BD%A9.html"/>
    <id>http://blog.acgtyrant.com/在-Linux-下全面使用真彩.html</id>
    <published>2018-06-26T03:28:03.000Z</published>
    <updated>2018-06-26T07:49:04.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="images/truecolor.png" alt="Termite, Tmux and NeoVim in true color."></p>
<p>我过去一直没真正弄好虚拟终端、Tmux 和 Vim 的配色，今天下定决心，终于彻底理清了它们在颜色上的来龙去脉。本文目标如题，那些本来支持真彩的成熟 GUI 程序就不说了，重点便是如何配色好 Termite，Tmux 和 NeoVim 等。</p>
<p>颜色有<a href="https://zh.wikipedia.org/wiki/色彩深度" target="_blank" rel="external">色彩深度</a>之分。</p>
<p>8-bit color 又名 256 color，用于最早期的彩色 Unix 工作站，于是一些古代虚拟终端连同这种局限也虚拟出来了，即它们只支持 8 位颜色，比如 xterm 和 urxvt。还有古老的终端多路复用器 screen 和 Tmux 也默认用 256 颜色。</p>
<p>24-bit color 又名 true color，一共有 16,777,216 colors，于是有人习惯用 “16 million colors” 称呼它，就像先前大家有时用 256 color 称呼 8-bit color 一样。它的表示形式要么是 a 24-bit hex value (e.g. <code>#4a32b1</code>)，要么是 an rgba vector (e.g. <code>rgba(16, 32, 64)</code>。</p>
<p>32-bit color 基于 24-bit color 而生，增加了 8-bit 透明通道。真・现代虚拟终端 Termite 就支持，以致它的背景可以变成半透明，阿宅喜欢靠它来看 waifu。此外 Termite 还可以直接把 8-bit color 单射到 24-bit color，比如 <code>color0 = #073642</code> 意味着把第一个 8-bit color 映射到某 24-bit color <code>#073642</code>。</p>
<p>有个环境变量叫 <code>TERM</code>，contains the type of the running terminal, e.g. <code>xterm-256color</code>. It is used by programs running in the terminal that wish to use terminal-specific capabilities. 我猜它主要是用来告知程序当前虚拟终端支持的颜色，好让后者自动选择相应合适的颜色空间。我发现 Termite 和 Tmux 会自动设置相应的 <code>TERM</code>，即分别为 <code>xterm-termite</code> 和 <code>screen</code>，由此看来用户不需要手动指定 <code>TERM</code> 了。</p>
<p>不过上面既然提到了 Tmux 的 <code>TERM</code> 是 <code>screen</code>，而后者又只支持 256 color，于是得让它改用 true color，好在 Tmux 2.2 已经支持了，<a href="https://wiki.archlinux.org/index.php/Tmux#24-bit_color" target="_blank" rel="external">设置也不难</a>。</p>
<p>最后的关键便是 Vim 的配色了，<a href="http://vim.wikia.com/wiki/256_colors_in_vim" target="_blank" rel="external">256 colors in vim</a> 发表于二〇〇六年，它还把支持 256 color 的 XTerm 当成所谓的现代虚拟终端，还说若 vim 想在 256 color 虚拟终端使用 256 color colorscheme，需要在 <code>.vimrc</code> 显式设置 <code>set t_Co=256</code>，这说明 Vim 本身默认的颜色空间可能都小于 8-bit！它不愧比虚拟终端还要古老。</p>
<p>五年后，依云发表《<a href="https://blog.lilydjwg.me/2011/6/15/let-vim-in-terminal-as-beautiful-as-gvim-gui2term-py-updates-to-version-3-0.27349.html" target="_blank" rel="external">让 Vim 在终端下和 GVIM 一样漂亮：gui2term.py 更新至 3.0 版</a>》，按这篇的说法，Vim 在 256 color 虚拟终端里没法像 GVim 用 24-bit color 即 True Color ColorScheme，需要通过某脚本把 True Color ColorScheme 转换成 Vim 可加载的 256 color ColorScheme，一劳永逸解决配色问题，虽然是近似的。</p>
<p>如今，@NanozukiCrows 发了一条推：</p>
<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="zh" dir="ltr">折腾了下 tmux 和 vim，用上 true color 主题了。再也不用忍受 16色 256色的 vim 了，顺眼了不少<br>现在用的是这个主题：gruvbox <a href="https://t.co/nXAN02kDuG" target="_blank" rel="external">https://t.co/nXAN02kDuG</a> <a href="https://t.co/VwlhCdTrMp" target="_blank" rel="external">pic.twitter.com/VwlhCdTrMp</a></p>&mdash; 结夜野棠 (@NanozukiCrows) <a href="https://twitter.com/NanozukiCrows/status/1008207005721300993?ref_src=twsrc%5Etfw" target="_blank" rel="external">2018年6月17日</a></blockquote></p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>就是这推促使了我彻底折腾并搞定颜色的来龙去脉。现在御用真・现代虚拟终端 Termite 本来就支持 32-bit color，御用终端多路复用器 Tmux 2.2 也支持 True Color。尽管我不清楚 Vim 对 True Color 的支持如何，但御用现代文本编辑器 NeoVim 设置 <code>termguicolors</code> 就可以支持了，再用任意 True Color ColorScheme，比如 <code>Plug &#39;morhetz/gruvbox</code>, <code>colorscheme gruvbox</code> 即可，当然，别忘了去掉 <code>set t_Co=256</code> 这蛋疼的古代颜色支持方案。</p>
<p><a href="https://gist.github.com/XVilka/8346728" target="_blank" rel="external">True Colour (16 million colours) support in various terminal applications and terminals</a> 也科普得很棒，里面有若干 <a href="https://gist.github.com/XVilka/8346728#here-are-another-console-programs-discussions" target="_blank" rel="external">console programs</a> 实在让人眼一亮，比如 <a href="https://github.com/hzeller/timg" target="_blank" rel="external">timg</a> 和 <a href="https://github.com/sebastiencs/ls-icons" target="_blank" rel="external">ls-icons</a>，原来真彩支持好了，在虚拟终端看图像和 Icons 也不难。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;images/truecolor.png&quot; alt=&quot;Termite, Tmux and NeoVim in true color.&quot;&gt;&lt;/p&gt;
&lt;p&gt;我过去一直没真正弄好虚拟终端、Tmux 和 Vim 的配色，今天下定决心，终于彻底理清了它们在颜色上的
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.acgtyrant.com/tags/Linux/"/>
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>无视原则</title>
    <link href="http://blog.acgtyrant.com/%E6%97%A0%E8%A7%86%E5%8E%9F%E5%88%99.html"/>
    <id>http://blog.acgtyrant.com/无视原则.html</id>
    <published>2017-09-24T02:29:00.000Z</published>
    <updated>2017-09-24T02:31:02.352Z</updated>
    
    <content type="html"><![CDATA[<p>遥想还呆在 Acfun 的当年，大家在关于自杀现象的某文章里正战得欢时，一条评论留给了我很深的印象，原话已不可考，按照模糊的印象大概是：<strong>日本社会算是彻彻底底冷漠到了极点，同情也好，挖苦也好，都意味著被自杀者触动了。然而日本大多人已经冷漠到对愈演愈烈的自杀现象依然无动于衷，该干嘛的就干嘛，不管自杀者在人生尽头故意能闹得有多惊天动地，也很快地在一阵喧嚣后被世人尽数遗忘。于是自杀现象俨然成了日本人中平淡无奇，再熟视无睹不过的日常。</strong></p>
<p>此后很长时间里，它成了我一直所发现的<strong>「最残忍的被动反应」</strong>，注意这行为只属于被动激发的反射行为分类。若要考虑主动层次上的恶意行为，方法多得是，但这并不在本文的讨论范围之内。 </p>
<p>我并不是左右脸均给敌方扇的圣人，若必要时，便只能以敌意对抗恶意。不过我贯彻更为中庸的<strong>「无视原则」</strong>，即遭到来自敌方的恶意攻击行为，<strong>若物理上的损失可忽略</strong>，就自动激发无视其的被动反应。注意，这里的「无视」<strong>纯粹就是字面上的意思，并不掺带多余的任何其他反应</strong>。而且，<strong>无视既是高贵的蔑视，又是宏大的宽容</strong>。无视原则能够化来恶意为虚无，且不作出任何攻击反弹，「我蔑视他人这恶意的攻击，但我还是宽恕他人这愚蠢的行为」，很符合我的「和」价值观。</p>
<p>恕我再改言之，无视意味著绝对无比的「无动于衷」，算是绝妙的蔑视态度了。那些并不造成任何物理上损失的恶意攻击，可以粗糙地归为一类：「挑衅」。这行为上的的确如同字面意义，为的是<strong>想激怒受害方，使后者产生不悦感</strong>，那么「无视」反应恰恰就能很好地挫败敌方的这一意图。心境如水，霸气十足。我来示范下：我在知乎上拉黑用户的原则是一旦遭受来自恶意用户的人身攻击，就直接「静默拉黑」，这举动在敌方看来就仿佛当事人泰然不为所动，没有任何反应，只轻轻地把他一手指弹到黑名单池，一劳永逸且不可逆转地切断了一切接触途径。毫无疑问，这脑补能当场给予敌方99999伤害，后者越中二伤害就越高。</p>
<p>于是，我反而奇怪 <strong>Real Life 中为什么仍旧有那么多人热衷于讨论令人反感的事物</strong>，例如几年前天天输的国足，这货臭名昭著得不能再臭，<strong>于是满口国足国足的观众，就如同满口排泄物排泄物一样令我厌恶</strong>。国足已经差劲到没有再被关注的任何价值，就让它自生自灭去，还偏要提，不光自我弄脏嘴巴，还影响他人心情。</p>
<p>我说过，欣赏也好，厌恶也好，<strong>都意味著被触动</strong>，有触动就意味著关注，而<strong>而大量的关注就能创造经济上的价值</strong>。<a href="https://zh.wikipedia.org/wiki/归真堂活取熊胆事件" target="_blank" rel="external">二〇一二年年初归真堂活取熊胆的事件</a>闹得很火，其实<strong>这可以算是对官方非常有利益的炒作</strong>，试想，如果哪天某人的亲人突然处于生命危险期，要被救活只有一个办法：「使用熊胆产品」，那么他人最先想到的会是什么？没错就是那因活熊取胆而一举臭名昭著的归真堂，但当事人一般情况下会不管一二，就消费熊胆产品先救活了亲人再说，于是说到底赢家还是归真堂。凤姐，芙蓉姐姐等人颇为使人反感，却笑到了最后，也同理。</p>
<p>最后，我并不提倡对一切来自敌方的恶意一律采取「无视原则」，否则有时就和阿Ｑ的「精神胜利法」没两样。那么什么情况下不便采用被动的「无视原则」呢，<strong>那便是遭到物理上的实际损失时</strong>，这时就要站出来主动维持自己的利益了。对于归真堂案例，若要惩罚这家公司，理想的情况便是舆论批评得严重到后者被法院执行经济制裁，或是遭到市场上的抵制而损失惨重。后来这家公司上市曲折无比。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遥想还呆在 Acfun 的当年，大家在关于自杀现象的某文章里正战得欢时，一条评论留给了我很深的印象，原话已不可考，按照模糊的印象大概是：&lt;strong&gt;日本社会算是彻彻底底冷漠到了极点，同情也好，挖苦也好，都意味著被自杀者触动了。然而日本大多人已经冷漠到对愈演愈烈的自杀现象
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>只有 Python 高手知道的 tuple</title>
    <link href="http://blog.acgtyrant.com/%E5%8F%AA%E6%9C%89-Python-%E9%AB%98%E6%89%8B%E7%9F%A5%E9%81%93%E7%9A%84-tuple.html"/>
    <id>http://blog.acgtyrant.com/只有-Python-高手知道的-tuple.html</id>
    <published>2017-09-19T11:54:14.000Z</published>
    <updated>2017-09-19T11:54:42.966Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉 Python 的人都知道，它从语法上支持的内置数据结构一共四种，即 tuple, list, dict, set 等, sequence comprehension 一共有三个，唯独没有 tuple comprehension, 其形式被解析为生成器表达式，而且表示单元素的 tuple 也很不一样，需要额外添加一个在新手看来十分碍眼的<strong>逗号</strong>：<code>(1,)</code>.</p>
<p>但其实我们只简单地把 tuple 理解为一个 immutable 版 list 了，并没有深刻理解到它的本质。推上有人如此一针见血地指出：</p>
<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/python?src=hash" target="_blank" rel="external">#python</a> tip:  Generally, lists are for looping; tuples for structs. Lists are homogeneous; tuples heterogeneous.  Lists for variable length.</p>&mdash; Raymond Hettinger (@raymondh) <a href="https://twitter.com/raymondh/status/324664257004322817" target="_blank" rel="external">2013年4月17日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>我终于发现了，tuple <strong>既可以当数据结构，又可以当模式来匹配变量</strong>。所以 tuple 说穿了是一个「不规则又不可变的数据结构或模式」，自然没有「推导规律」介入的余地，也难怪没有所谓的 <a href="https://stackoverflow.com/questions/16940293/why-is-there-no-tuple-comprehension-in-python" target="_blank" rel="external">tuple comprehension</a> 了。</p>
<p>一旦洞察 tuple 的本质后，你就发现，tuple 原来大有文章：</p>
<p>其一，事实上，返回多个值的函数实则是在返回一个 tuple, 只不过可以省略括号而已。一旦理解透这个，就不会再写出 <code>tp, label_tp = [], [] if len(result) == 0 else zip(*result)</code> 这大坑了。</p>
<p>其二，只有一个变量的 tuple 在模式里可谓等价于变量本身，于是<strong>不是说 (1,) 里的逗号多余，而是它本身的括号就多余，毕竟没人爱写 <code>(a,) = (b,)</code></strong>; 其实 <code>()</code> 才是唯一真正特殊的 tuple; 于是纯括号就可以被名正言顺地赋予数学上的意义了，即 <code>(a)</code> 等于 <code>a</code>, 而且其实这还带来了方便 wrap line 的额外好处：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hfm_dir_str = (</div><div class="line">        &apos;/home/acgtyrant/Projects/HamsterForMTK/&apos;</div><div class="line">        &apos;Hamster_Android_SDK/src/com/mapbar/hamster&apos;)</div></pre></td></tr></table></figure>
<p>其三，虽说没多少人喜欢 <code>(1,)</code> 这写法，但我们可以分拆 sequence 值成多行，<strong>且每行后更有一个逗号</strong>！这对强迫症患者真是终极福音：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">phodopus_evaluate_command = (</div><div class="line">        command_pathname,</div><div class="line">        &apos;-v&apos;, video_pathname,</div><div class="line">        &apos;--proto&apos;, proto_pathname,</div><div class="line">        &apos;--model&apos;, model_pathname,</div><div class="line">        &apos;--mean&apos;, mean_pathname,</div><div class="line">        &apos;-c&apos;, cascade_model_pathname,</div><div class="line">        &apos;--lf_proto&apos;, lf_proto_pathname,</div><div class="line">        &apos;--lf_model&apos;, lf_model_pathname,</div><div class="line">        &apos;--lf_mean&apos;, lf_mean_pathname,</div><div class="line">        &apos;--noshow&apos;,</div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>于是我习惯分拆函数的超长形参列表多行了，且最后一行以右括号结尾；多行的 sequence 值则倒数第二行以逗号结尾，倒数一行以右括号结尾且不缩进。</strong></p>
<p>其四，tuple 不光可当安全的 immutable 数据结构，而且<a href="https://stackoverflow.com/questions/68630/are-tuples-more-efficient-than-lists-in-python" target="_blank" rel="external">效率公认比 list 好</a>。</p>
<p>此外，tuple 在模式匹配上也威力十足：</p>
<p>其一，方便交换变量：<code>a, b = b, a</code>, 毕竟等价于 <code>(a, b) = (b, a)</code> 模式匹配嘛。</p>
<p>其二，<a href="https://www.python.org/dev/peps/pep-3132" target="_blank" rel="external">PEP 3132 – Extended Iterable Unpacking</a> 和 <a href="https://www.python.org/dev/peps/pep-0448" target="_blank" rel="external">PEP 448 – Additional Unpacking Generalizations</a> 也是模式匹配。此外，我们不能直接用星号 unpack generator, 但照样可以模式匹配 <code>a, *_ = range(10)</code>, 毕竟只要后者能迭代就行了。现在看来，由于我已经洞察了 tuple 的本质，对它原本的坏印象也没有了。</p>
<p>其三，如果你想要可读性更好的模式匹配，可以试试 <code>collections.namedtuple</code> 库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;熟悉 Python 的人都知道，它从语法上支持的内置数据结构一共四种，即 tuple, list, dict, set 等, sequence comprehension 一共有三个，唯独没有 tuple comprehension, 其形式被解析为生成器表达式，而且表示单
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://blog.acgtyrant.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>「听力残疾」不完全科普</title>
    <link href="http://blog.acgtyrant.com/%E3%80%8C%E5%90%AC%E5%8A%9B%E6%AE%8B%E7%96%BE%E3%80%8D%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%A7%91%E6%99%AE.html"/>
    <id>http://blog.acgtyrant.com/「听力残疾」不完全科普.html</id>
    <published>2017-09-12T13:53:32.000Z</published>
    <updated>2017-09-12T14:03:18.569Z</updated>
    
    <content type="html"><![CDATA[<p>中国残疾人联合会指定的听力残疾等级标准指出：</p>
<blockquote>
<p>听力残疾，是指人由于各种原因导致双耳不同程度的永久性听力障碍，听不到或听不清周围环境声及言语声，以致影响其日常生活和社会参与。</p>
<p>听力残疾的分为如下几级：</p>
<p>听力残疾一级：</p>
<p>听觉系统的结构和功能方面极重度损伤，较好耳平均听力损失≥ 91 dB HL<br>，在无助听设备帮助下，不能依靠听觉进行言语交流，在理解和交流等活动上极度受限，在参与社会生活方面存在极严重障碍。</p>
<p>听力残疾二级：</p>
<p>听觉系统的结构和功能重度损伤，较好耳平均听力损失在 81~90 dB HL<br>之间，在无助听设备帮助下，在理解和交流等活动上重度受限，在参与社会生活方面存在严重障碍。</p>
<p>听力残疾三级：</p>
<p>听觉系统的结构和功能中重度损伤，较好耳平均听力损失在 61~80 dB HL<br>之间，在无助听设备帮助下，在理解和交流等活动上中度受限，在参与社会生活方面存在中度障碍。</p>
<p>听力残疾四级：</p>
<p>听觉系统的结构和功能中度损伤，较好耳平均听力损失在 41~60dB HL<br>之间，在无助听设备帮助下，在理解和交流等活动上轻度受限，在参与社会生活方面存在轻度障碍。</p>
</blockquote>
<p>我属于一级，但有很多人难以暸解其具体困难之处，以致有相当多不准确的解读，我便感到很有必要一次性澄清了。</p>
<p>所发现的解读主要有：「听不见」、「听不清」和「听不懂」等。若你语文嗅觉足够敏锐，当然容易一眼看出其不同：</p>
<ul>
<li>听不见：又称「听不到」，即<strong>几乎感觉不出一切声音</strong>。</li>
<li>听不清：听得见声音，但是「干扰」很严重，从而<strong>只接收到「失真」的声音</strong>，听障人本身的听力缺陷有可能会引发此现象。</li>
<li>听不懂：听得见又听得请，但是<strong>不知要如何理解其意思</strong>。就像小孩听不懂大人的高深话题，中国人听不懂老外说啥一样。</li>
</ul>
<p>不过，就我的经验来看，实际情况是要更复杂些，以上三种并非彻底彼此独立，即彼此有多为交集：</p>
<p>其一，若听不见的缺陷并不完全，也就是说还是能听得见部分声音，就会产生<strong>由「听不见」缺陷所导致的「听不清」障碍</strong>。打个比方，一个听障人能明确听得见「aoe」，但是几乎听不见「iu」。于是若一个人对ta说了「啊噢呃咦唔」，但是ta是「听不清」完整的句子的，因为ta只能明确地听得见「啊噢呃」，「咦唔」就听不见，于是ta或许可以通过对方的口型看出<strong>有发出了五个字的声音</strong>，ta <strong>还知道前三个字是什么</strong>，但是就是<strong>不清楚后两者又是什么</strong>。于是此谓<strong>由并不完全的「听不见」缺陷，所导致的「听不清」缺陷</strong>。</p>
<p>其二，若一个人听不清对方的话，当然就会不好理解对方所表达的，即<strong>由「听不清」所导致的「听不懂」的障碍</strong>。我猜学过英语的诸位应该深有体会：在正式学习英语之前，当听见一段纯粹的英语对白时，只会觉得它<strong>如同「呼噜呼噜」一样足够「模糊不清」的一段声音</strong>，要模仿发音更是不可能，因为我们连其所包含的每一个音标单位的发音都不知道。于是我们若要听得懂这段对白，就得弄清楚句子的完整读法，即把它分割成众多独立的单词，再一个一个地弄清楚其意思，其发音又是什么。当我们熟悉了每一个单词，于是要听得懂完整句子就不难了，理解其意思也水到渠成。所以结论是：若要听得懂外语，就必须<strong>先克服「听不清」的障碍</strong>，而这恰恰是<strong>需要练习的。</strong>其实对母语的学习也是如此，只不过因为在母语环境中，实在足够「耳濡目染」，以致大家长大了，都会几乎忘了自己对母语的掌握，其实是有「练习」过的印象。</p>
<p>我说过自己属于听力残疾一级级别，当然也就处于纯粹的「听不见」处境了，听力损失有一百分贝多，是什么样子的？家庭聚餐时，我扭头看电视，全然听不见位置相邻的父亲狂涛怒吼过。若你靠近我耳旁用力尖叫，能听得见一点点点。不过如今可不好说，因为听力衰退越来越厉害了，其实据母亲说，一开始听力分贝损失是 85-110, 可至少在两年前衰退到 100-120 了。</p>
<p>好在<strong>「助听器」能打破这困境</strong>，原理应该是通过耳背上的仪器收集物理上的外部声音，并放大声音响度并输送到耳部，突破听力损失的阈值，从而让用户「听得见」了。</p>
<p>但<strong>仍无法解决「听不清」的障碍</strong>，我说过听力缺陷比较复杂，其实上面所用到的「啊噢呃咦唔」例子还不够贴切，用颜色来类比更好：<strong>正常人能看到五颜六色的世界，但听障人就像色盲一样，只能看到有颜色偏差的世界。</strong>什么颜色看得见，什么颜色看不见？这个就因人而异了。</p>
<p>于是就轮到我正在使用的<strong>「人工耳蜗」</strong>隆重登场了。听障人的种种问题，<strong>大多应该可以归结于「耳蜗」的生理缺陷</strong>，但人工耳蜗就可以<strong>取而代之</strong>，即通过手术，把它嵌入到耳蜗处，并通过「电磁感应」现象，来接收附在外部的「言语处理器」所在物理上所收集到的外部声音信号，转化为神经上的脉冲信号，绕过了原本功能缺失的耳蜗，直接发送给大脑，从而让大脑直接感到「听觉」。</p>
<p>既然彻底绕过了原本有缺陷的「耳蜗」，则「听不清」障碍就几乎全无，用户能像正常人一样直接听到极其不失真的「原声」。所以如今我实际上只处于「听不懂」处境，即对汉语和英语的掌握，前者需要进一步的练习，后者需要从零开始，这些都只是如同小孩牙牙学语的另一外回事了。</p>
<p>当然，就目前的技术来说，人工耳蜗并不能像天然耳蜗输送纯粹的「原声」，只能尽可能地减少「失真度」而已。就目前来说，我的困难之处如下：</p>
<ol>
<li>需要花时间从头开始学习英语听说，很久以前我就开始上某英国绅士的英语口语课，当前<strong>只听得懂</strong>大概六分之一；该绅士真是好人。</li>
<li>几乎没法进行「多人对话」，很多饭局就只能默默地低头吃饭……</li>
<li>在空间相当大却又嘈杂的地方，很难听清对方的话。</li>
<li>没法一边注意力分散在别处时，一边听同行者的话，比如上下楼梯。</li>
<li>很疲劳的时候，听力效果也会大幅度下降，可谓累得不想再听了……</li>
<li>普通话口音很怪，先天没训练好，矫正要付出大量精力。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中国残疾人联合会指定的听力残疾等级标准指出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;听力残疾，是指人由于各种原因导致双耳不同程度的永久性听力障碍，听不到或听不清周围环境声及言语声，以致影响其日常生活和社会参与。&lt;/p&gt;
&lt;p&gt;听力残疾的分为如下几级：&lt;/p&gt;
&lt;p&gt;听力残
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单位元对编程的启发</title>
    <link href="http://blog.acgtyrant.com/%E5%8D%95%E4%BD%8D%E5%85%83%E5%AF%B9%E7%BC%96%E7%A8%8B%E7%9A%84%E5%90%AF%E5%8F%91.html"/>
    <id>http://blog.acgtyrant.com/单位元对编程的启发.html</id>
    <published>2017-09-04T12:50:54.000Z</published>
    <updated>2017-09-04T12:51:22.517Z</updated>
    
    <content type="html"><![CDATA[<p>最近，我在处理一个文本文件，它有三列，分别为文件名，数字，字符串，且其中第一列中有若干重复了的部分，于是我需要把这些重复的行合并起来，即第二列合并为总和，第三列合并为一条新字符串，且用空格分隔。</p>
<p>我一开始想如此合并：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sum = 0</div><div class="line">string = &apos;&apos;</div><div class="line">for duplicate_line in duplicate_lines:</div><div class="line">    sum += int(duplicate_line.split()[1])</div><div class="line">    string = &apos; &apos;.join(string,  duplicate_line.split()[2])</div></pre></td></tr></table></figure>
<p>但迭代完后 string 并不符合我的期望，它包含了一个 heading space! 这令我想起了抽象代数学上的「单位元」，即<strong>它在某二元运算中，与任意元素运算后，结果的值恒为后者本身。</strong>比如加法中的 0 与任何数字相加，恒返回后者的原值；乘法中的 1 也同理。</p>
<p>于是我们可以说，把 ‘ ‘.join() 当二元运算符来看时，<strong>不存在单位元</strong>，即 ‘ ‘.join([a, b]) 中 b 为任意字符串时，不存在 a 变量能使这函数返回 b 本身，哪怕变量 a 为空字符串时，也会返回包含了一个 heading space 和 b 值的新字符串！就像我上面的代码一样。不过 ‘’.join() 当然就有单位元即空字符串。</p>
<p>反观 Python 的 int 加法，它就有单位元，即 sum 的初值 0, 也难怪它和悲剧的 string 君不同，可以安全地返回我期望的值。</p>
<p>这启发了我又一条编程规范：<strong>要小心那些没有单位元的函数或运算符，并处理得当。</strong>其实上面合并 string 的代码可以妙用 list comprehension, 回避掉 heading space.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; &apos;.join([duplicate_line.split()[2] for duplicate_line in duplicate_lines])</div></pre></td></tr></table></figure>
<p>举一反三，Python Sequences 的 index 为什么从 0 而不是 1 开始计呢？您倒不如想想另一个问题：Sequences Index 的单位元是什么？即对 Index 进行二元运算时，加多少就返回原 Index? 当然是 0 了！再看 C 指针，它和 0 相加时就返回原指针，也难怪 C 的 Array Index 和 Python 的 Sequences Index 都从 0 开始，这是为了<strong>当直接把原 Index（甚至 C 的指针即地址）和 Index 初始值（即单位元）相加时，能方便且直接地得到原 Index（甚至 C 的原指针即原地址）</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，我在处理一个文本文件，它有三列，分别为文件名，数字，字符串，且其中第一列中有若干重复了的部分，于是我需要把这些重复的行合并起来，即第二列合并为总和，第三列合并为一条新字符串，且用空格分隔。&lt;/p&gt;
&lt;p&gt;我一开始想如此合并：&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程规范" scheme="http://blog.acgtyrant.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>什么情况下 map 比 list comprehension 好？</title>
    <link href="http://blog.acgtyrant.com/%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B-map-%E6%AF%94-list-comprehension-%E5%A5%BD%EF%BC%9F.html"/>
    <id>http://blog.acgtyrant.com/什么情况下-map-比-list-comprehension-好？.html</id>
    <published>2017-09-03T03:59:40.000Z</published>
    <updated>2017-09-03T04:04:58.537Z</updated>
    
    <content type="html"><![CDATA[<p>事实上，<a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map/1247490#1247490" target="_blank" rel="external">list comprehension 公认效率比 map 好</a>，<strong>所以当 map 比 list comprehension 可读性好且不在乎性能时，可以优先用前者。</strong></p>
<p>那问题又来了：什么时候 map 的可读性比较好？<strong>当且只当低阶函数是你所熟悉的 Python 函数，便利的 sequence 对象也够一目了然时。</strong>比如我就经常用它转换命令列表，够一气呵成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">traincascade_command = [</div><div class="line">    command_pathname,</div><div class="line">    &apos;-w&apos;, weight,</div><div class="line">    &apos;-h&apos;, height,</div><div class="line">    &apos;vec&apos;, vec_pathname,</div><div class="line">]</div><div class="line">traincascade_command = map(str, traincascade_command)</div><div class="line">subprocess.call(traincascade_command)</div></pre></td></tr></table></figure>
<p>妈妈再也不用担心我不小心传 int, pathlib.Path 进命令列表了，写的 list comprehension 又长又臭得超出 79 个字符了。同理，<code>rects = map(int, rect_strs)</code>, <code>positives = map(abs, integers)</code> 之类的精炼表达式也可以。</p>
<p>因为你很清楚 str, int 和 abs 等是一元函数，作用是什么；反之，即用你所不熟悉的 Python 函数，比如 a = map(b, c), 这时你往往会产生四重疑惑：</p>
<p>其一，<strong>b 是一个 callable 对象吗？</strong><br>其二，<strong>b 可以只接受一个形参吗，即它到底是不是一元函数？</strong><br>其三，<strong>c 是否为 sequence 对象？</strong><br>其四，<strong>c 的 iterable 元素又是什么鬼？</strong></p>
<p>更别说用雪上加霜的 lambda 了。</p>
<p>但换用 list comprehension 就没这问题：<code>a = [b(d) for d in c]</code>, 显然 b(d) 表达了 b 彻彻底底是个一元函数，且 c 作为 sequence 对象时 iterable 元素是 d, 最终 a 会被 bind 到一个 list 对象。可读性更胜一筹。</p>
<p>举一反三，你可以琢磨什么情况下 filter, funtools.reduce 等也能如法炮制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事实上，&lt;a href=&quot;https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map/1247490#1247490&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程规范" scheme="http://blog.acgtyrant.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
      <category term="Python" scheme="http://blog.acgtyrant.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>using 指示命名空间习惯不好</title>
    <link href="http://blog.acgtyrant.com/using-%E6%8C%87%E7%A4%BA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B9%A0%E6%83%AF%E4%B8%8D%E5%A5%BD.html"/>
    <id>http://blog.acgtyrant.com/using-指示命名空间习惯不好.html</id>
    <published>2017-09-02T03:50:24.000Z</published>
    <updated>2017-09-02T03:53:17.660Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="zh" dir="ltr">C++ 新手最常见的错误：<br><br>using namespace std;</p>&mdash; 御宅暴君 (@acgtyrant) <a href="https://twitter.com/acgtyrant/status/644719997206458368" target="_blank" rel="external">2015年9月18日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="zh" dir="ltr"><a href="https://twitter.com/librehat" target="_blank" rel="external">@librehat</a> 污染了全局作用域上的命名空间。</p>&mdash; 御宅暴君 (@acgtyrant) <a href="https://twitter.com/acgtyrant/status/644781322360098816" target="_blank" rel="external">2015年9月18日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="zh" dir="ltr"><a href="https://twitter.com/librehat" target="_blank" rel="external">@librehat</a> std 里面的命名特别多；如果一个 cpp 文件 using 指示了某命名空间，为了一致性，别的 cpp 文件也得 using 指示同一个命名空间，长远来看是灾难；从有限的上下文无法判断某命名是不是标准库或别的命名空间里面的，比如 diff 输出。</p>&mdash; 御宅暴君 (@acgtyrant) <a href="https://twitter.com/acgtyrant/status/644801502163243008" target="_blank" rel="external">2015年9月18日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>如果不禁止 using 指示，那么你在多人项目里，如何判断同一个标识符在由不同工程师编写的源代码里，是否为同一个东西？</p>
<p>如果大家保持一致性，即某些命名空间都要 using 指示出来，别的不 using 指示。然而，又如何规定哪些要指示哪些不用指示？害得大家束手束脚地保持一致，规定也众口难调地麻烦；对个人项目也是一样的道理，如果开发者随心所欲地在这里不 using 指示 std, 却又在那边 using 指示它，从长远来看维护将是灾难。</p>
<p>最后，你能保证将来永远不会取消对某命名空间的 using 指示吗？否则你得给这被 using 指示的命名空间里所有用到的标识符一一加上命名空间作用域前缀，你想象一下怎么弄吧，你有办法自动化处理且绝不出错吗？</p>
<p>对我来说，与其大费周章地划出可以被 using 指示的命名空间，还不如一劳永逸地用奥卡姆柴刀砍掉 using 指示用法，也省了我在 tweets 里列举的种种缺点。</p>
<p>我写 C++ 时，爱把迭代器对象直接声明为 iterator 并拿来用，也很清楚 vector 是一个「向量」对象或别的什么，反正不会是 std::vector 那种容器，我放心我舒服。你呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;zh-cn&quot;&gt;&lt;p lang=&quot;zh&quot; dir=&quot;ltr&quot;&gt;C++ 新手最常见的错误：&lt;br&gt;&lt;br&gt;using namespace std;&lt;/p&gt;&amp;mdash; 御宅暴君 (@ac
    
    </summary>
    
    
      <category term="编程规范" scheme="http://blog.acgtyrant.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
      <category term="C++" scheme="http://blog.acgtyrant.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>代码，编码，编程，规范和风格</title>
    <link href="http://blog.acgtyrant.com/%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%BC%96%E7%A0%81%EF%BC%8C%E7%BC%96%E7%A8%8B%EF%BC%8C%E8%A7%84%E8%8C%83%E5%92%8C%E9%A3%8E%E6%A0%BC.html"/>
    <id>http://blog.acgtyrant.com/代码，编码，编程，规范和风格.html</id>
    <published>2017-08-31T13:19:27.000Z</published>
    <updated>2017-08-31T13:25:19.228Z</updated>
    
    <content type="html"><![CDATA[<p>我最近下定决心不再拖延博客的更新，但也懒得重启独立的技术博客，于是以后技术博文就在这里发表。</p>
<p>计算机科学基础老生常谈，编程语言也是如此。我没兴趣当 language lawyer, 就讲讲颇为人文的<strong>编程规范</strong>吧。</p>
<p>大家过去应该也看到过不少类似的关键词：代码风格、编码风格、编程风格和编程规范等等。光一家著名的 Google Coding Guide Style 的民间翻译就囊括了以上用词。最初，李开复先生称它为「编码规范」，且我以前翻译 Google C++ Guide Style 时，没仔细琢磨好翻译用词，就同时用到了「风格」，「编码」，「编程」等等，不一致啊。</p>
<p>咬文嚼字了一会，先从「代码」、「编码」、「编程」汰劣存优开始吧。「代码」只是一个名词，不如动词来得亲切；「<a href="http://www.zdic.net/c/6/f/23119.htm" target="_blank" rel="external">编码</a>」即是表示<strong>一系列机器级别指令</strong>的名词，又是表示<strong>手动转换机器码与汇编码</strong>的动词；然而人类死跟机器码较劲的时代已经结束了，现在是高级编程语言的天下了，我们不想拘泥于表面的「编码」，而只关心足够抽象的 Program, 即程序，所以现在看来「编程」是最理想的翻译用词。</p>
<p>至于「风格」与「规范」又如何呢？我倾向于 <a href="http://www.andreasboye.com/2013/05/the-conventions-we-follow.html" target="_blank" rel="external">The conventions we follow</a> 对此的分析：「风格」只讲究代码的格式化形式，比如缩进啊空白啊注释形式啊，然而「规范」涉及的更为广泛，即同时包括了编程风格和其它规范，就像该不该用某语言特性，用什么编译工具链，甚至如何版本控制等等。</p>
<p>编程可谓一门艺术，又是一项工程。若要运用得炉火纯青，可不能光划个风格就了事，还要相当洞悉所用编程语言的特性，以及开发环境的理想部署等等，这时「规范」就很重要了。从此以后，我将不时地探讨种种编程规范。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我最近下定决心不再拖延博客的更新，但也懒得重启独立的技术博客，于是以后技术博文就在这里发表。&lt;/p&gt;
&lt;p&gt;计算机科学基础老生常谈，编程语言也是如此。我没兴趣当 language lawyer, 就讲讲颇为人文的&lt;strong&gt;编程规范&lt;/strong&gt;吧。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程规范" scheme="http://blog.acgtyrant.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>C++ 怎么念</title>
    <link href="http://blog.acgtyrant.com/C-%E6%80%8E%E4%B9%88%E5%BF%B5.html"/>
    <id>http://blog.acgtyrant.com/C-怎么念.html</id>
    <published>2017-08-30T15:12:51.000Z</published>
    <updated>2017-08-30T15:15:06.041Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="zh" dir="ltr">北大教授把 C++ 称为Ｃ加加，我就呵呵了。</p>&mdash; 御宅暴君 (@acgtyrant) <a href="https://twitter.com/acgtyrant/status/649186235672567808" target="_blank" rel="external">2015年9月30日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>我有听力障碍，于是就算三次元里周围有人谈及 C++ 且把它读成「Ｃ加加」，我也不怎么有印象。倒是长期以来受英文资料薰陶，英文上的 C++ 便先入为主了，毕竟 + 在英文里就是 “plus”. 于是我凡看到这词时，脑海就默默地响起 “C plus plus”, 也难怪我在上北京大学的公开课时，不由得呵呵一笑。不过推上大多数人不以为然，有的猜读为 “C double plus”, 有的搞怪成「C艹」，有的恶俗地叫「C屁屁」。</p>
<p>其实 C++ 到底读成什么并不重要，就看你和谁打交道了。如果就只局限于品读谭浩强大师著作、不会上 StackOverflow、天天百度 C++98/03 文档、从来没去过官网 isocpp.org、靠 Visual C++ 6 开发的小圈子里，大家约定俗成地一起读成Ｃ加加，也挺好；如果你向来满口污言秽语，「Ｃ艹」很适合你；如果你想和 Bjarne Stroustrup 之风流谈笑风生，小心点别念错 cplusplus 是了。</p>
<p>其实查 C++, C#, TeX 之类的英文读法也不难：去英文维基百科看条目即可，一般开头就有音标，C++ 念 /siː plʌs plʌs/.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;zh-cn&quot;&gt;&lt;p lang=&quot;zh&quot; dir=&quot;ltr&quot;&gt;北大教授把 C++ 称为Ｃ加加，我就呵呵了。&lt;/p&gt;&amp;mdash; 御宅暴君 (@acgtyrant) &lt;a href=&quot;h
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="C++" scheme="http://blog.acgtyrant.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何跟进深度学习的研究前沿？</title>
    <link href="http://blog.acgtyrant.com/%E5%A6%82%E4%BD%95%E8%B7%9F%E8%BF%9B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A0%94%E7%A9%B6%E5%89%8D%E6%B2%BF%EF%BC%9F.html"/>
    <id>http://blog.acgtyrant.com/如何跟进深度学习的研究前沿？.html</id>
    <published>2017-08-29T14:25:54.000Z</published>
    <updated>2017-08-29T14:35:35.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>一开始没必要就读论文，而是通过 cs231n, deep learning 等教程打好基础。其实由于深度学习这领域刚发展起来，所以 CS213n 给了不少论文的对应关键词，比如 AlexNet, VGGNet, ZFNet, GoogLeNet, ResNet 等等。可以从这相当基本的论文开始读，如果作为本科生且没有接受过学术训练，花一周以上才免强读懂一篇论文也不奇怪，但读多了就越来越快，我现在刚两小时略读完一篇论文，如果是很水的论文大概可能在半小时就全读完。</p>
<p>如果很难读懂论文，可以先搜搜别人的论文笔记（当然是中文），来源经常包括 CSDN 博客，简书，知乎问答，知乎专栏甚至个人博客等等，我都订阅了它们的 RSS, 其中知乎专栏可以直接用 Inoreader 订阅。</p>
<h2 id="用-Zotero-管理论文"><a href="#用-Zotero-管理论文" class="headerlink" title="用 Zotero 管理论文"></a>用 Zotero 管理论文</h2><p>我用 Zotero 管理论文，它有三个优势：可以通过浏览器插件在相关网页上（比如 arXiv, Google Scorlar, Microsoft Research 等等）一键收录论文到 Zotero; 可以在论文条目下写笔记；论文分类、归档、排序十分方便。怎么用 Zotero 管理网上满是教程，我就不赘述了，我只给大家看看我的分类树以及时间排序界面：</p>
<p><img src="images/zotero.png" alt="Zotero 界面"></p>
<p>于是读的论文可以按时间和重要性排序递增，顺便一提，分类树随时要修改以符合你当前心中的最佳分类，比如我以前把 AlexNet, VGGNet, ZFNet, GoogLeNet, ResNet 等都是放到「年度论文」的，但现在我把它们改移到「网络结构」里了，同时该分类还有 Network in Network, Highway Networks 等等；此外我曾经有个分类「奇技淫巧」，旗下又有「训练算法」，「防过拟合」，「权重初始化」和「激活函数」等等，但我最近嫌分类太散乱，于是又花了点时间苦思冥想，终于想出更合适的分类「优化理论」，我便取消「奇技淫巧」这分类，把大部分论文都归档到这新分类。</p>
<h2 id="收集论文、开始跟进研究前沿"><a href="#收集论文、开始跟进研究前沿" class="headerlink" title="收集论文、开始跟进研究前沿"></a>收集论文、开始跟进研究前沿</h2><p>读论文多了，你就会越来越熟悉你所从事领域的学术大牛，比如物体检测的 Ross Girshick, 语义识别的 Jifeng Dai, 对抗学习的 Goodfellow 等等。这时可以直接在 Google Scholar 的学术用户页面上关注他们的新文章，这样可以在第一时间收到他们发表论文的最新动态。或者干脆天天刷 arxiv 也可以，当初 Focal Loss 那篇论文我晚了好几天才收到 Google 快讯，而别人早在知乎相关问题讨论起来了，一问才知道他们习惯天天刷 arxiv, 可惜我连 Zotero 里的论文都没读完，更别说天天刷新论文了。</p>
<p>在知乎上也可以关注顶级会议、学术竞赛的相关问题，比如 <a href="https://www.zhihu.com/question/57523080" target="_blank" rel="external">CVPR 2017 有什么值得关注的亮点?</a> 和 <a href="https://www.zhihu.com/question/51024166" target="_blank" rel="external">如何评价ILSVRC2016的比赛结果？</a> 上面会有别人帮你总结好的答案，直接按图索骥即可。</p>
<p>也可以直接去学术竞赛看天梯排名，看看当前战斗力最强的模型对应的论文是啥，扒下来读，比如 <a href="http://host.robots.ox.ac.uk:8080/leaderboard/displaylb.php?challengeid=11&amp;compid=6" target="_blank" rel="external">PASCAL VOC 2012 Segmentation Competition</a> 当前的首席 <a href="https://arxiv.org/abs/1706.05587" target="_blank" rel="external">DeepLabv3</a> 和第五席 <a href="https://arxiv.org/abs/1612.01105" target="_blank" rel="external">PSPNet</a>.</p>
<p>如果打算专心用 PyTorch 做研究，可以<a href="https://stackoverflow.com/questions/7353538/setting-up-an-github-commit-rss-feed" target="_blank" rel="external">订阅</a> awesome-pytorch 的 <a href="https://github.com/rickiepark/awesome-pytorch/commits/master.atom" target="_blank" rel="external">RSS</a>, 对其他 GitHub 上的<a href="https://github.com/jtoy/awesome-tensorflow" target="_blank" rel="external">类似 awesome 项目</a>也可如法炮制。</p>
<p>最后，若有人能带你就更好，比如导师会收集论文并传给学生，据我所知商汤他们每周有论文分享会，以跟进论文最新前沿。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;p&gt;一开始没必要就读论文，而是通过 cs231n, deep learning 等教程打好基础。其实由于深度学习这领域刚发展起来，所以 CS21
    
    </summary>
    
    
      <category term="技术" scheme="http://blog.acgtyrant.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="深度学习" scheme="http://blog.acgtyrant.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何打分</title>
    <link href="http://blog.acgtyrant.com/%E5%A6%82%E4%BD%95%E6%89%93%E5%88%86.html"/>
    <id>http://blog.acgtyrant.com/如何打分.html</id>
    <published>2017-06-26T16:04:13.000Z</published>
    <updated>2017-06-26T16:07:13.298Z</updated>
    
    <content type="html"><![CDATA[<p>豆瓣对书籍和电影的评分是五星制，即一星到五星的字面意义分别为：很差——较差——还行——推荐——力荐。</p>
<p>我对这评分制很满意，因为它的评级是奇数，即存在中间值，又向高低延伸了恰到好处的两个评级。这么以来我可以如此进一步阐释该评分机制：</p>
<p>三星：可有可无，即看了没啥快感，不看也没损失。<br>二星：反感，即有负面评价。<br>四星：好看，使我产生了愉悦感，自然愿意向他人推荐。<br>五星：特别好看，让我十分狂喜，以致愿意给出远超四星的高评价，证明这是佳作中的佳作。<br>一星：负面情绪更为强烈，即对其抱有纯粹的敌意，我也许会为此破口大骂，执行制裁。</p>
<p>一星和二星的区别很关键，世界那么大，我不喜欢的东西自然也多了去，对于二星作品，我讨厌它，但可以老死不相往来，于是彼此的互动也就到此为止了。不过我若给作品一星，说明这作品不光惹我讨厌，而且还彻底激怒了我，以致我竟然产生纯粹的敌意来。所以我不会轻易给作品打一星，如果打了，说明性质很严重。</p>
<p>我回顾了下我到目前为止看过的 179 部电影，其中被我打一星的作品只有「美丽中国乡村行」和「嫁给大山的女人」，一个涉及抄袭，另一个在宣传我所敌视的拐卖价值观。</p>
<p>此外，我在回顾中又重新审视了下四星和五星的区别，其实它们应该贯彻二八定律：即五星只给一堆已经达到四星水准的作品中特别出色的部分，即佳作中的佳作。且如果五星评价次数与四星的比例越小，说明其评价越愈发稀缺，份量自然也越高。于是我重新把过多的五星评价打回三四星，留下了极少数我觉得愿意给出五星评价的上乘作品。</p>
<p>我决定每年不光归档当年已观看的作品，还要集中重新回顾作品一次，原本好看且被评为四星的作品要么继续保留四星，要么因为我审美观进一步提高而被降星，给出五星的评价次数一定要控制在百分之二十以内。原则上来说五星评价应该越少越好，且大多数作品的得分集中在三星四星，毕竟若看的二星作品过多，说明我自己在自讨苦吃，没有意义。</p>
<p>我给出五星评价的作品到目前为止有：狩猎、地心引力、降临、你的名字、革命机、疯狂动物城、火星救援、西游记之大圣归来、迷雾、消失的爱人、海洋天堂、辩护人、僵尸世界大战、环太平洋、福音战士新剧场版：Q、守法公民、美丽心灵、万能钥匙、调音师。</p>
<p>最后我要批评大众点评的评分机制，得分制也是五星，但中间值竟然是二星，即差——一般——好——很好——非常好。</p>
<p>「差」这一星可不能有效区分「我吃到了苍蝇，激怒了我！」和「难吃」这两种评价；为了区分「好」、「很好」和「非常好」三种评价，按照二八定律，顾客需要先光顾二十五多种不同的商户，才能从中挑出五种达到「很好」的商户，以及仅一种达到「非常好」的商户。显然若顾客的消费经验不足，容易被这三种评价弄得手足无措，以致只能随便打分了事，没法有效科学区分。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;豆瓣对书籍和电影的评分是五星制，即一星到五星的字面意义分别为：很差——较差——还行——推荐——力荐。&lt;/p&gt;
&lt;p&gt;我对这评分制很满意，因为它的评级是奇数，即存在中间值，又向高低延伸了恰到好处的两个评级。这么以来我可以如此进一步阐释该评分机制：&lt;/p&gt;
&lt;p&gt;三星：可有可无
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>我怎么借钱给朋友</title>
    <link href="http://blog.acgtyrant.com/%E6%88%91%E6%80%8E%E4%B9%88%E5%80%9F%E9%92%B1%E7%BB%99%E6%9C%8B%E5%8F%8B.html"/>
    <id>http://blog.acgtyrant.com/我怎么借钱给朋友.html</id>
    <published>2017-06-24T05:55:19.000Z</published>
    <updated>2017-06-24T05:57:05.863Z</updated>
    
    <content type="html"><![CDATA[<p>一开始问清楚对方想借多少，设为 <code>A</code>; 然后我要想一想，我愿意白送给他多少钱，即有借无还，设为 <code>B</code>. 最后借他 <code>min(A, B)</code> 钱。</p>
<p>如果是老朋友，不打借条，我会信赖口头承诺；反之则反。</p>
<p>就我目前的财力来看，<code>B</code> 少得比不上银行贷款，自然也没收什么利息的余地，就算如此，<strong>我愿意免息，这其实已经是友谊的象征了。</strong></p>
<p>如果对方故意不还钱，我也不会提，毕竟一开始就把借钱金额控制在「我愿意白送他多少」条件下了，自然也不会坏什么心情，于是照常和对方怎么打交道就怎么打交道。但是，若对方依然要借钱且总借款已超过 B 上限，我不会答应，如果对方变本加厉以断交为威胁，那友谊的小船说翻就翻吧，毕竟这从来只是他单方面的个人问题，我的损失也不疼不痒。</p>
<p>其实，比起我向别人借钱，我更愿意向正规银行借钱，信用卡或银行贷款都是好东西，银行给你评估风险，设置的额度也相应科学，好说；借车也向商业公司租赁，以免发生<a href="https://www.zhihu.com/question/25015924" target="_blank" rel="external">这些狗血破事</a>；重大人身事故直接上社会保险和商业保险而不是到处向亲戚朋友拉众筹。我希望我的朋友们也是这样的聪明人。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始问清楚对方想借多少，设为 &lt;code&gt;A&lt;/code&gt;; 然后我要想一想，我愿意白送给他多少钱，即有借无还，设为 &lt;code&gt;B&lt;/code&gt;. 最后借他 &lt;code&gt;min(A, B)&lt;/code&gt; 钱。&lt;/p&gt;
&lt;p&gt;如果是老朋友，不打借条，我会信赖口头承诺；反之
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>少鉴定他人，多表达偏好</title>
    <link href="http://blog.acgtyrant.com/%E5%B0%91%E9%89%B4%E5%AE%9A%E4%BB%96%E4%BA%BA%EF%BC%8C%E5%A4%9A%E8%A1%A8%E8%BE%BE%E5%81%8F%E5%A5%BD.html"/>
    <id>http://blog.acgtyrant.com/少鉴定他人，多表达偏好.html</id>
    <published>2017-06-12T14:51:46.000Z</published>
    <updated>2017-06-12T14:52:17.573Z</updated>
    
    <content type="html"><![CDATA[<p>开门见山，所谓「鉴定」，即是 judge.</p>
<p>我在 about 上如此介绍自己「超・完美無瑕之守序中立」，在称呼上尤其如此。<strong>我现在凡称呼每一样东西，都尽量用相当中性，不带任何色彩的词语。</strong>副作用是，我已经一本正经到已经不爱用「帝都魔都妖都」这些诙谐的称呼了。</p>
<blockquote class="twitter-tweet" lang="zh-cn"><p lang="zh" dir="ltr">@erase2004 光寫著正體中文就不知道比他們殘體中文有文化多少倍了，果然經過文化大革命的國家人民思想個個超英趕美呢(？</p> xatier[AT]黑色奇蹟←↑↓→ (@xatierlikeLee) 2015年11月8日</blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>我不打算讨论繁体中文与简体中文之间所谓的高下之分，大家用让自己愉悦的中文就好，谁挑衅就静默拉黑谁。可是 @xatierlikeLee 放着「简体中文」不用，而是把它叫成「残体中文」，这称呼自然颇为贬低。此外这构成了一个鉴定，且容易让所有人陷入一个「非黑极白」的谬误。因为既然一开始他把它叫成「残体中文」，那么议题往往会变成对「残体中文」的鉴定，即「它到底是不是残体中文」的是非题，而不是更为具体客观的「它有什么残缺」。</p>
<p>同理，天朝、五毛、美分、圣母、理中客等一样是简单粗暴的鉴定，即我所理解的 judge. 当然，<strong>我向来不轻易鉴定他人，也不接受他人的恶意鉴定，无礼之徒一律静默拉黑。</strong>此外我并不喜欢菊苣大神等这些正面鉴定，虽无冒犯之意，但也没诚意，毕竟通货膨胀到贬值，只有当面赞美并肯定他人做了怎样的壮举与善举，或是用稀贵的敬辞，如阁下先生老师等，才情真意切。可惜，<a href="http://blog.acgtyrant.com/你只不过是我们的产品罢了，毕竟又不是您.html">如今现在大部分中国互联网企业连用「您」这简单的客套话都做不到了</a>。</p>
<p>同理同理，想必有些人会对知乎上所谓「利益相关」声明反感无比吧，因为当事人直接自我鉴定成非黑即白的个体，比如「我是上海人」，那么议题同时就塌缩成二元了，即他的答案只在「你也是上海人」时正确，反之则反。于是说到底既然对方都自我鉴定成那样了，还继续讨论议题，只会浪费彼此的时间。另一方面，若当事人不涉及对双方的鉴定，而是精准地讨论何种行为对彼此有何利弊，于是博弈起来又快又直，这样我才喜欢。</p>
<p>然而，人能表达自己偏好何人何物，并进一步解释。比如 xatierlikeLee  可以表达：「我不喜欢简体中文，因为它有缺陷」，情有可原。<strong>这样大家就能相互理解，且道不同不相为谋，更加节约彼此的时间，让彼此进一步找到自己所偏好的人物，开心就好。</strong></p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开门见山，所谓「鉴定」，即是 judge.&lt;/p&gt;
&lt;p&gt;我在 about 上如此介绍自己「超・完美無瑕之守序中立」，在称呼上尤其如此。&lt;strong&gt;我现在凡称呼每一样东西，都尽量用相当中性，不带任何色彩的词语。&lt;/strong&gt;副作用是，我已经一本正经到已经不爱用「帝都
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>你只不过是我们的产品罢了，毕竟又不是您</title>
    <link href="http://blog.acgtyrant.com/%E4%BD%A0%E5%8F%AA%E4%B8%8D%E8%BF%87%E6%98%AF%E6%88%91%E4%BB%AC%E7%9A%84%E4%BA%A7%E5%93%81%E7%BD%A2%E4%BA%86%EF%BC%8C%E6%AF%95%E7%AB%9F%E5%8F%88%E4%B8%8D%E6%98%AF%E6%82%A8.html"/>
    <id>http://blog.acgtyrant.com/你只不过是我们的产品罢了，毕竟又不是您.html</id>
    <published>2017-06-08T15:57:54.000Z</published>
    <updated>2017-06-08T16:00:59.565Z</updated>
    
    <content type="html"><![CDATA[<p>互联网时代里，名为「免费」的商业模式大行其道，知乎上的苏莉安就分析得妙：<a href="http://www.zhihu.com/question/20034166/answer/17734091" target="_blank" rel="external">如果商家为你提供免费服务，那你就不是他们的客户，而是他们的产品。</a></p>
<p>如同苏莉安所说，免费只是一种商业模式罢了，用户要自己琢磨到底好不好用。不过我却要对国内大部分互联网产品打零分：<strong>光从「你／您」措辞之分上，就已经没什么诚意了</strong>。因为我从来<strong>没看到过这些产品有恭恭敬敬地用「您」来称呼客户</strong>，说到底后者确确实实只是个产品罢了，实际体验也不出所料。</p>
<p>再次，客户的身份不光被如此降格，而且互联网产品更变本加厉地<strong>拟人化</strong>，即<strong>不按「用户协议」认真办事，偏要取闹，哗众取宠：</strong></p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="zh" dir="ltr">那些大多国产软件卸载时，都会冒出一脸哭丧状的拟人化吉祥物，来向你确认是否继续卸载，选择之一便是「残忍卸载」，这实际上算是在人身攻击用户，即指责依旧继续卸载软件的用户本性残忍。&#10;&#10;区区乙方，少自以为是。</p>&mdash; 御宅暴君 (@acgtyrant) <a href="https://twitter.com/acgtyrant/status/572972023120441345" target="_blank" rel="external">March 4, 2015</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>不过专门运营社区的互联网产品就可以不讲究「您」敬辞了，毕竟社区贵在平等的气氛，比如知乎果壳豆瓣等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;互联网时代里，名为「免费」的商业模式大行其道，知乎上的苏莉安就分析得妙：&lt;a href=&quot;http://www.zhihu.com/question/20034166/answer/17734091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如果商家为
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>习惯掀翻棋盘</title>
    <link href="http://blog.acgtyrant.com/%E4%B9%A0%E6%83%AF%E6%8E%80%E7%BF%BB%E6%A3%8B%E7%9B%98.html"/>
    <id>http://blog.acgtyrant.com/习惯掀翻棋盘.html</id>
    <published>2017-06-03T14:33:54.000Z</published>
    <updated>2017-06-03T14:34:25.220Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久以前看到过一个问题：<a href="http://www.rocidea.com/roc-1075.aspx" target="_blank" rel="external">一个上帝、狼、狮子和羊的故事</a>。其实选择权根本无谓，甚至对天敌的反抗也无谓，我的第一反应就是如何干掉上帝，毕竟从一开始的选择问题是他说了算，同时也意味着他可以随时玩死羊群，他才是真正的威胁。<strong>人的强大可不能单单是拘泥于他人施舍的权利，而是自己之所以有权利是因为我能有权利。</strong></p>
<p>所以我一直对「<a href="https://www.zhihu.com/question/50239793/answer/143608773" target="_blank" rel="external">给你一千万，你会不会卖掉你的老婆？为什么？</a> 」这种问题嗤之以鼻，因为若真遇上了有能力付出这价码的强人，同时意味着他也能轻而易举地从你身上收走同一种等级的代价，非常危险，所以第一反应不是认真思考这蠢问题而是小心翼翼且低调地从他的视线中消失，避免被他随意的行动波及，除非你也足够强悍。</p>
<p>可惜大多数凡人没我这样的大局观，容易随波逐流。比如国家防火墙因为一些人的行为而封锁 GitHub, 于是有另一些人指责他们而不是国家防火墙本身；再顺便扔个我的看法：有好多人严厉指责 EVA 里的真嗣或三体的程心，都有上帝视角了还没有大局观，这样的观众放到棋盘里面恐怕也只是一个棋子罢了，我不相信他们会比主人公做得更好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久以前看到过一个问题：&lt;a href=&quot;http://www.rocidea.com/roc-1075.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个上帝、狼、狮子和羊的故事&lt;/a&gt;。其实选择权根本无谓，甚至对天敌的反抗也无谓，我的第一
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
      <category term="批判性思维" scheme="http://blog.acgtyrant.com/tags/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>对行不对事不对人</title>
    <link href="http://blog.acgtyrant.com/%E5%AF%B9%E8%A1%8C%E4%B8%8D%E5%AF%B9%E4%BA%8B%E4%B8%8D%E5%AF%B9%E4%BA%BA.html"/>
    <id>http://blog.acgtyrant.com/对行不对事不对人.html</id>
    <published>2017-01-17T02:39:41.000Z</published>
    <updated>2017-06-03T14:42:43.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对人悲剧"><a href="#对人悲剧" class="headerlink" title="对人悲剧"></a>对人悲剧</h2><p>最近知乎上 H1Z1 火起来了，我对这样的零和游戏向来不感兴趣，毕竟<a href="http://steamcommunity.com/id/acgtyrant/recommended/282070/" target="_blank" rel="external">我不习惯滥杀无辜</a>，不过正好<a href="https://www.zhihu.com/question/29317486/answer/141308634" target="_blank" rel="external">有非常切题的对人悲剧</a>可以拿出来讲一讲。</p>
<p>这视频里发生什么了？一个「自称来自江苏」的玩家「发现他遇到的 twodollar0624 自称胡建人」，且对方装备比较差，就「带领他并冲锋陷阵地与其他玩家交战」；twodollar0624 「偷袭并杀死」江苏玩家，「洗劫掉对方的装备」、「发表胜利的欢呼并辱骂对方」；此外在 twodollar0624 「欺诈」的过程中，好多「使用繁体字」的观众「在幸灾乐祸地嘲笑」。</p>
<p>注意我的措辞，<strong>所引用的描述皆是行为</strong>，你可以看出我没说 twodollar0624 是一个住在台湾的玩家，即没说「他是台湾人」，毕竟我只知道「他在游戏自称胡建人、习惯用繁体字」这若干事实等等而已；同理，我也不强调江苏玩家是大陆人。</p>
<p>说到底<strong>我不关心 twodollar0624 是不是台湾人</strong> ，然而他却在另一个玩家做了一件好事即「友好地与 twodollar0624 结盟并保护他」的情况下，主动背叛了另一个玩家并杀死他，<strong>就仅仅因为后者是他所认定且仇视的大陆人</strong>。是的，<strong>世界上有很多人全然不顾他人畜无害甚至反而给予帮助的事实，就仅仅因为对方的身份而莫名地仇视后者</strong>，这样的悲剧太多了，一些人集中屠杀犹太人没完没了、一些人抱炸弹冲进一些异教徒没完没了、一些男人恶意歧视一些女人没完没了。比如有好多住在中国的人就跟 twodollar0624 做的这事一样龌龊，即习惯仇视住在日本的人，哪怕后者绝大部分仅仅出生在战后时代的日本而已，不一定有做了什么损于前者利益的坏事，当然有一些人参拜神社修改历史教材等等现象另当别论。</p>
<h2 id="对事悲剧"><a href="#对事悲剧" class="headerlink" title="对事悲剧"></a>对事悲剧</h2><p>所以一百年前，胡适先生提倡<strong>对事不对人</strong>，即只看对方所涉及的事件，不看对方是什么人，这样可以杜绝很多对人悲剧，比如 twodollar0624 就可以接受如此可靠的结盟，一起开开心心地行动，功利更加最大化，大陆与台湾更加团结和谐一点点点点点。但是，其实还可以再更进步一点，即<strong>对行不对事</strong>。</p>
<p>这时就要给读者布置一个作业：观看<a href="http://www.bilibili.com/video/av4345364/" target="_blank" rel="external">《狩猎》</a>。完成后再回来继续阅读，下文自然有涉及剧透！</p>
<p>你要知道，「事件」往往没你想的那么简单，即<strong>并不一定真实</strong>。先搞清楚何为「事件」，它可以有四个要素，即时间、地点、人物和行为，即谁在哪里什么时候做了什么行为。其实还可以再进一步简化，即<strong>谁做了什么</strong>。</p>
<p>「卢卡斯性侵了未成年的卡拉」，这是对一件事实的描述，但这事实就是真实发生的吗，卢卡斯真「性侵了未成年的儿童」了吗？影片中的小镇居民认定为真，处于上帝视角的我们则反。但是，现实中的你并没有上帝视角，你真敢认定你过去所认为的所有事件也一定真实无误吗？万一却导致过卢卡斯那样受人排挤的对伪事悲剧你却浑然不知呢？那么到底该怎么办呢？顺便一提，影片也发生了「一些小镇居民恶意对待没做坏事、仅仅是卢卡斯儿子的马库斯」这对人悲剧。</p>
<p>影片中的警察检察院等行政机构其实做了好榜样，即由于证据不足而无罪释放卢卡斯。那么关键答案来了，「性侵犯未成年的儿童」这行为，大家自然毋庸置疑要始终地所反对所抵制所制裁，即对行；至于对「某人性侵犯了未成年的儿童」一事，则就要慎之又慎了，<strong>即必须先找到构成这事实的客观证据</strong>。在你没有证据之前，不要果断对你所不熟悉的事实下结论，但是，你可以先对行为下结论，即你坚决反对「性侵犯未成年的儿童」。事实上，我过去对事实的任何评价也几乎都贯彻了这原则，自然也从来不怕「事件反转」这狗血展开，毕竟我首先只在评价恶劣的行为，极少评价「大家所认为的事实」。</p>
<p>此外，对行不对事其实还带来了一处意外的好处，即可以回避他人的一些审查。试想，当局屏蔽了「三鹿牛奶」，你没法大喊「我抗议三鹿牛奶事件！」，但是，你可以改大喊「我抗议牛奶作假！」，毕竟你在抗议社会所公认的贬义动词即不齿行为，当局若要屏蔽这些词语，比如「牛奶作假」，成本就极其沉重且更加司马昭之心路人皆知。</p>
<h2 id="新难题"><a href="#新难题" class="headerlink" title="新难题"></a>新难题</h2><p>其实，尚有些难题，光靠对行不对事依然没法有效解决，我也不知道怎么办，你只需要知道它的存在即可。</p>
<p><a href="http://www.guancha.cn/society/2015_04_06_314942.shtml" target="_blank" rel="external">成都漫展CD15出现穿日本军装者 网传该活动将因此遭取缔</a></p>
<p>有人实行了「穿日本军服」这行为，那么难题来了，<strong>这样的行为有什么危害？</strong>讲道理，这位观众不可能是出来杀中国人的， 现实里也没杀中国人，刀枪应该也是玩具，咋一看没什么危害。但是，却也有人连同「穿日本军服」都无法接受，即严重伤害了后者的心理。所以，<strong>何为善行何为恶行本身就是价值观上的难题</strong>，仁者见仁智者见智且大家要靠自己与他人较量了。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对人悲剧&quot;&gt;&lt;a href=&quot;#对人悲剧&quot; class=&quot;headerlink&quot; title=&quot;对人悲剧&quot;&gt;&lt;/a&gt;对人悲剧&lt;/h2&gt;&lt;p&gt;最近知乎上 H1Z1 火起来了，我对这样的零和游戏向来不感兴趣，毕竟&lt;a href=&quot;http://steamcommuni
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
      <category term="批判性思维" scheme="http://blog.acgtyrant.com/tags/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>知乎乱象</title>
    <link href="http://blog.acgtyrant.com/%E7%9F%A5%E4%B9%8E%E4%B9%B1%E8%B1%A1.html"/>
    <id>http://blog.acgtyrant.com/知乎乱象.html</id>
    <published>2017-01-16T02:51:26.000Z</published>
    <updated>2017-01-17T02:42:25.899Z</updated>
    
    <content type="html"><![CDATA[<p>用知乎久了，我总结出三个乱象，此外我开始戒知乎了。</p>
<h2 id="反对加没有帮助"><a href="#反对加没有帮助" class="headerlink" title="反对加没有帮助"></a>反对加没有帮助</h2><p>官方对「没有帮助」按钮有本末倒置的解释：「没有帮助」表示该答案对你没有价值。在我看来，每一个对题的答案自然是要解决「问题」。若读者认为这答案能解答问题，赞同即可，反之则反对；若答案本身不对题，自然则是没有帮助了。于是答案只能处于这三种状态之其一，不可共存两种以上状态。</p>
<p>可是居然有读者习惯反对加没有帮助，有时还要特意跑去评论宣言这行为一番，即不认为这答案能解决问题，又不对题。于是这导致了可悲的现象——<strong>大部分人不关心问题，只想解决他所偏好所厌恶</strong>，说难听点就是要斗臭他所厌恶的答案。如果是我的话，<strong>我当然只会关注我所偏好的问题，再挑有在解答问题的好答案</strong>，而不是如此本末倒置。</p>
<h2 id="讲故事大赛"><a href="#讲故事大赛" class="headerlink" title="讲故事大赛"></a>讲故事大赛</h2><p><a href="https://www.zhihu.com/question/53659576/answer/136629850" target="_blank" rel="external">当校内已经出现校园暴力事件时，学校应该采取怎样的行动才能将伤害降至最低？</a>下面有一堆答主自顾自地讲述自己所遭遇的校园暴力故事，博取同情，于是前四个答案愣是答不对题还高票。类似的现象已经发生很多次了，说到底有不少用户喜欢把问题变成讲故事大赛，<strong>一些答主讲故事爽了，一些读者听听他所偏好的故事爽了，终究不关心怎么解决问题。</strong>再结合「反对加没有帮助」现象来看就特别喜感，一部分人所「赞同」或「反对加没有帮助」的答案，竟然都没有在解答问题。于是校园暴力恐怕一如既往地大行其道，毕竟没多少人解答怎么解决或赞同解决办法。</p>
<h2 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h2><p>我每次凡是看到答案声明「利益相关」且后缀往往是身份时，我就往往跳过去不看了。<strong>因为这些答案往往把问题扭曲且坍缩成如此狭隘的二元问题，即「你和答主是否属于同一种共同利益群体」</strong>，这自然已经脱离了原问题的初衷了，且答案自然要么为是要么为非。于是当问题下的答案普遍发表利益相关声明，那么问题就很容易变成站队大战，<strong>且那些和读者利益无关的答案自然没有解答原问题。</strong>我没兴趣知道也不想拘泥于答案的答主身份，一个问题下的好答案应该是多元化的，都和答主或读者的身份没有关系。若用户关心在某问题，那么这问题下的好答案应该无关乎利益群体身份，而是认认真真地在解决问题。</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用知乎久了，我总结出三个乱象，此外我开始戒知乎了。&lt;/p&gt;
&lt;h2 id=&quot;反对加没有帮助&quot;&gt;&lt;a href=&quot;#反对加没有帮助&quot; class=&quot;headerlink&quot; title=&quot;反对加没有帮助&quot;&gt;&lt;/a&gt;反对加没有帮助&lt;/h2&gt;&lt;p&gt;官方对「没有帮助」按钮有本末倒置的
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
      <category term="批判性思维" scheme="http://blog.acgtyrant.com/tags/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>恶意歧视、弱者补正与政治正确</title>
    <link href="http://blog.acgtyrant.com/%E6%81%B6%E6%84%8F%E6%AD%A7%E8%A7%86%E3%80%81%E5%BC%B1%E8%80%85%E8%A1%A5%E6%AD%A3%E4%B8%8E%E6%94%BF%E6%B2%BB%E6%AD%A3%E7%A1%AE.html"/>
    <id>http://blog.acgtyrant.com/恶意歧视、弱者补正与政治正确.html</id>
    <published>2017-01-08T05:45:53.000Z</published>
    <updated>2017-06-03T13:44:27.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="恶意歧视"><a href="#恶意歧视" class="headerlink" title="恶意歧视"></a>恶意歧视</h2><p><strong>歧视是差别对待。</strong>甲和乙一起高考，前者分数高，且被优先录取，<strong>这就是一种歧视</strong>，毕竟录取主要原则向来是择优选拨。但事到如今原本中义的它和「政治正确」一样被污染了，很多人搞不清歧视带来的利弊。</p>
<p>塞尔校园先锋面向大学生，且价格比市场价便宜不少，当然是因为学生往往不劳动，消费能力自然也比职工低，于是很多企业在塞尔校园先锋上价格歧视大学生，薄利多销以利润最大化，学生也享受到了实实在在的好处，于是没多少学生要拒绝这种歧视。</p>
<p>成年男性比成年女性强壮，我性别男，我在歧视女性，我之所以这么说是因为在统计上，成年人口按强壮排名，前一半里男人肯定居多，比例大概超过百分之八十。而且<strong>我习惯简化贯彻二八原则的规律阐述</strong>，即我懒得重复上文那个又长又臭的「精确」结论：「在统计上，成年人口按强壮排名，前一半里男人肯定居多，比例大概超过百分之八十」，「成年男性比成年女性强壮」才叫人话。但是，如果若要说我比某世界女性举重冠军强壮，不管我举不动她比赛时举的杠铃，即<strong>刻意违背符合科学的事实，因为一种无关紧要的特征而差别对待</strong>，那么这就是<strong>恶意歧视</strong>了。</p>
<p>所以比起差别对待，有没有恶意才是关键。</p>
<h2 id="弱者补正"><a href="#弱者补正" class="headerlink" title="弱者补正"></a>弱者补正</h2><p>人有强弱之分，但都是人类，均需要有基本的人权，否则就容易变成导致大多悲剧的根本起源，比如不同群体甚至「物种」之间的互相残杀。我要吃喝玩乐，战争这种零和游戏很没意思，所以我支持必要的「弱者补正」，即以国家政府为行政机构单位，保证一些作为弱者的国民能享有基本的利益，这样可以减少很多悲剧。当然，人若要追求更强大的利益，则应当靠他自己的个人努力了。</p>
<p>美国好象要推行教育平权法案，即高等学校按种族这种特征划分人群，且按人口比例等同录取。按我的理解，高等学校终究是教育机构，为了教育而服务，那么它该录取什么样的学生呢？<strong>当然是学习能力与动力更好的人</strong>，否则就是在浪费资源，且考试分数往往与学习能力与动力正相关，即恐怕没有比考试选拔更能考察这些能力了。</p>
<p>但是美国政府偏偏要靠「种族」这种根本无关紧要的特征区分强者与弱者，不是蠢笨就是充满了恶意的种族歧视。<strong>为了正确地贯彻「弱者补正」，我们应该用更为科学的特征来区分群体，比如金钱。</strong>即一个穷学生若考试分数和某富学生一样相当，则录取机会相等，但前者免学费。当然，要免多少学费，就看他有多穷了。</p>
<p>举一反三。聋人学生在英语的听力考察里处于非常致命的劣势地位，高考若要补正，则可以只考察他的英语笔试分，即再乘以所在省份当年高考所有正常学生的笔试分与总分之比，得到他应得的总分，这才科学。</p>
<h2 id="政治正确"><a href="#政治正确" class="headerlink" title="政治正确"></a>政治正确</h2><p>其实就算它被污染了，依然可以和「弱者补正」一样，按字面上的意思来理解，即「利益正当」。如果说价格是市场的杠杆，调节卖家与买家的利益博弈，那么政治正确就是政治的杠杆，同样调节强者与弱者的利益博弈。</p>
<p>「没有中国，就没有共产党」，共产党毕竟是中国唯一的合法执政党，相较于其他在野党以及群众，当然算是强者了，于是它自然需要用这种口号来继续维持它的强者利益；「不能歧视黑人」，这则是一种弱者补正了，即在保护黑人的利益，如果你认为黑人是弱者的话。</p>
<p>政治正确一开始的初衷我认为很美好，即补正弱者，但后来被一些人恶意利用了，比如一些白人左派对另一些人大喊大叫「闭嘴！我们在谈论言论自由！」。于是现在这个词被用得乱七八糟，被各种各样的人用来正当化他们自己的利益，天天发动大大小小的「嘴遁・政治正确」，来攻击与前者有利益冲突的对象。</p>
<p>所以我习惯琢磨别人口中的「政治正确」究竟在代表什么利益。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;恶意歧视&quot;&gt;&lt;a href=&quot;#恶意歧视&quot; class=&quot;headerlink&quot; title=&quot;恶意歧视&quot;&gt;&lt;/a&gt;恶意歧视&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;歧视是差别对待。&lt;/strong&gt;甲和乙一起高考，前者分数高，且被优先录取，&lt;strong&gt;这就是一种歧视&lt;
    
    </summary>
    
    
      <category term="价值观取向" scheme="http://blog.acgtyrant.com/tags/%E4%BB%B7%E5%80%BC%E8%A7%82%E5%8F%96%E5%90%91/"/>
    
      <category term="批判性思维" scheme="http://blog.acgtyrant.com/tags/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
</feed>
